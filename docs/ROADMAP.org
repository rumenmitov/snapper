#+title: Snapper 2.0 - Roadmap
#+author: Rumen Mitov
#+email: rumen.mitov@pconstructor.tech
#+date: \today
#+options: toc:nil prop:t p:t pri:t


* DONE [#A] Setup Snapper Project
DEADLINE: <2025-06-16 Mon>
:PROPERTIES:
:Effort:   4
:END:
- [X] Create run file and Makefile
- [X] Use Goa as a build tool
- [X] Define data structures and ~Snapper~ object.

* TODO [#C] Unit Tests
DEADLINE: <2025-06-16 Mon>
:PROPERTIES:
:Effort:   4
:END:
The following unit tests are used to check if the functions are not throwing any unexpected errors. For testing with actual virtual pages in PhantomOS check out the [[#integration-tests][Integration Tests]] section.

** DONE Snapshot creation
1. Create an array of 1000 elements containing random integers.
2. Create a snapshot of every element in the array.
3. If test is successful, there should be no errors thrown.

** TODO Snapshot successful recovery
*** Test #1
Note, this test requires an archive of a generation storing integers in the range from 1 to 1000 in increasing order.

1. Create an empty array that can hold 1000 integers.
2. Recover each file from the generation into an element in the array.
3. If test is successful, the array should store all numbers from 1 to 1000 in ascending order.

*** Test #2
Note, this test requires an archive containing two generations: one invalid, the second invalid. Both generations are snapshots of an array containing all integers from 1 to 1000 in increasing order. However, the older, invalid one contains some files that are needed by the valid generation. 

1. Create an empty array that can hold 1000 integers.
2. Recover each file from the valid generation into an element in the array.
3. If test is successful, the array should store all numbers from 1 to 1000 in ascending order.

*** Test #3
Note, this test requires an archive containing a generation and an invalid snapshot created after the valid generation. The valid generation should store integers in the range from 1 to 1000 in increasing order.

1. Create an empty array with capacity for 1000 integers.
2. Recover each file from the generation into an element in the array.
3. If test is successful, the array should store all numbers from 1 to 1000 in ascending order and the incomplete generation's directory should have been removed.

** DONE Snapshot unsuccessful recovery
Note, this test requires an archive of a generation whose archive file has an invalid CRC. 

1. Try to recover the generation.
2. If test is successful, the recovery should not be possible and an error should be written stating that the archive file is invalid.

** DONE Snapshot purge
Note, this test requires an archive of two valid generations. Both generations are snapshots of an array containing all integers from 1 to 1000 in increasing order. However, the older one contains some files that are needed by the valid generation. 

1. Purge the older generation.
2. Create an empty array with capacity for 1000 integers.
3. Trying to recover from the older generation should be unsuccessful.
4. Recover each file from the non-purged generation into an element in the array.
5. If test is successful, the array should store all numbers from 1 to 1000 in ascending order.

* DONE [#B] Snapshot Creation
DEADLINE: <2025-06-16 Mon>
:PROPERTIES:
:Effort:   10
:END:
1. If the _latest_ generation does not have a valid archive file, delete it (the generation is incomplete).
2. Initialize a new generation directory with an RTC timestamp as the name.
3. Within the generation directory create the archive file and the snapshot directory.
4. Check if there is a valid prior generation (based on the timestamps). If there is, load the archive file's data into the ~Snapper::Archiver~.
5. Let h_{i} := ~Snapper::Archiver[i]~. If ~Snapper::Archiver[i]~ contains backlinks, use the /first backlink/ (i.e. the earliest backlink).
6. For each p_{i} \in P where the CRC of the file h_{i} does not match the CRC of p_{i} (or h_{i} does not exist):
   1. Create new file, h_{j}, and save the binary contents of p_{i} into this new file.
   2. Initialize the snapshot file with the new CRC of the data, a reference count of 1, and the binary data of p_{i}.
   3. Update ~Snapper::Archiver[i]~ \gets /path(/ h_{j} /)/, there /path()/ is the path relative to _<snapper-root>_.
7. For each p_{i} \in P where CRC of the file h_{i} matches the CRC of p_{i}:
   1. If the file h_{i} has a reference count greater than or equal to *SNAPPER_REDUND*:
      1. Create a new file h_{j} as outlined in Step 6.
      2. Increment the reference count for all files in ~Snapper::Archiver[i]~.
      2. Enqueue /path(/ h_{j} /)/ to ~Snapper::Archiver[i]~.
   2. If the file h_{i} has a reference count lower than *SNAPPER_REDUND*, increment the reference count of it and all other redundant files in ~Snapper::Archiver[i]~.
8. Save ~Snapper::Archiver~ into the archive file and calculate its CRC.

#+LATEX: \clearpage


* DONE [#B] Snapshot Recovery
DEADLINE: <2025-06-23 Mon>
:PROPERTIES:
:Effort:   10
:END:
1. Choose a generation to boot from (by default the latest one).
2. Check if the generation is valid (i.e. has an archive file with a valid CRC). If not, recovery is not possible.
3. Load the archive file of the latest valid generation into ~Snapper::Archiver~.
4. For each h \in ~Snapper::Archiver~ and for each backlink, h_{i} \in h:
   1. Check the CRC with the stored data.
   2. If h_{i} does not exist or there is a mismatch with the CRC, try the next backlink.
   3. If there are no more backlinks to check, respond according to the configured policy.
   4. If the CRC matches h_{i}, load the data of h_{i} into the corresponding page p_{i}.

* DONE [#C] Snapshot Purge
DEADLINE: <2025-06-23 Mon>
:PROPERTIES:
:Effort:   10
:END:
Note, that when a file's reference count is decremented to 0, the file is removed. If a directory becomes empty as a result, it is removed.

1. Make sure the generation is valid (i.e. it has an archive file with a valid CRC).
2. If the archive file has an invalid CRC:
   1. If *SNAPPER_INTEGR* is set to true, crash the system and ask the system administrator to replace the generation's corrupted archive file with a backup copy.

      Note, that if no backup copy exists it is highly recommended to manually remove the current generation as well as all subsequent generations. Snapper can continue to function without the removal, but the broken generation and its files will never be removed. Alternatively, the administrator could manually remove the broken generation and set *SNAPPER_INTEGR* to false. That way any snapshots that relied on the broken generation will only output warnings but will not crash the system if they are unable to recover a file.
      
   2. Otherwise, log an error message and boot the system into a clean state.
3. If the archive file has a valid CRC:
   1. Load the archive file into ~Snapper::Archiver~.
   2. For each entry h \in ~Snapper::Archiver~ and for each file h_{i} \in h: decrement the file h_{i}'s reference count.
   3. Delete the archive file.

* TODO [#C] XML Configuration Support
DEADLINE: <2025-06-30 Mon>
:PROPERTIES:
:Effort:   5
:END:
- [ ] SNAPPER_ROOT
- [ ] SNAPPER_THRESH
- [X] SNAPPER_VERBOSE
- [X] SNAPPER_INEGR
- [X] SNAPPER_REDUND
- [ ] Retention::MAX_SNAPS
- [ ] Retention::EXPIRATION

* TODO [#C] Integration Into PhantomOS
DEADLINE: <2025-06-30 Mon>
:PROPERTIES:
:Effort:   10
:END:
* TODO [#C] Integration Tests
DEADLINE: <2025-07-07 Mon>
:PROPERTIES:
:Custom_id: integration-tests
:Effort:   5
:END:
The following tests will be conducted within PhantomOS.

- [ ] Snapshot creation
- [ ] Snapshot recovery
- [ ] Snapshot purge

* TODO [#C] Demo Application to Demonstrate Snapper
DEADLINE: <2025-06-14 Sat>
:PROPERTIES:
:Effort:   15
:END:
Create a graphical application to demonstrate Snapper's capabilities. Perhaps a weather app that graphs real-world data? The application state should be taken a snapshot of which will be restored after a system reboot.
